apiVersion: v1
kind: ConfigMap
metadata:
  name: get-linode-id
  namespace: {{ required ".Values.namespace required" .Values.namespace }}
  labels:
    app: csi-linode
data:
  get-linode-id.sh: |-
    #!/bin/bash -efu
    # Define Metadata API URL
    META_IP="169.254.169.254"
    META_API="http://$META_IP/v1"
    ID=""

    # Function to check if Metadata API is reachable
    check_metadata_api() {
       ping -c 1 $META_IP > /dev/null 2>&1
       return $?
    }

    if check_metadata_api; then
      # Try to get ID using Metadata API with a 5-second timeout
      TOKEN=$(curl -sS -m 5 -X PUT -H "Metadata-Token-Expiry-Seconds: 3600" $META_API/token || true)
      if [ ! -z "$TOKEN" ]; then
        ID=$(curl -sS -m 5 -H "Metadata-Token: $TOKEN" $META_API/instance -H "Accept: application/json" | jq -r .id |  tr -d '\n' || true)
        echo "Metadata linode ID was $ID"
      fi
    fi

    # If Metadata API fails, try dmidecode
    if [ -z "$ID" ]; then
        echo "Getting Linode ID using dmidecode"
        apk add --update dmidecode
        ID=$(dmidecode --string system-serial-number | tr -d '\n')
        echo "Dmidecode linode ID was $ID"
    fi

    # If dmidecode fails, use kubectl method
    if [ -z "$ID" ]; then
      echo "Getting Linode ID using kubectl"
      id="$(kubectl get node/"${NODE_NAME}" -o jsonpath='{.spec.providerID}')"
      if [[ ! -z "${id}" ]]; then
        echo "${id}"
        if [[ "${id}" =~ "linode://" ]]; then
          echo -n "${id:9}" > /linode-info/linode-id
          echo "node-label linode ID was $id"
        else
          echo "Provider ID: ${id} does not have linode:// prefix."
          echo "Not populating /linode-info/linode-id file"
        fi
        exit 0
      fi
    fi

    # All has failed, still 0. Then exit the script, no point continuing on this broken cluster
    if [ -z "$ID" ]; then
      echo "Unable to fetch the linode-id"
      exit 1
    fi

    # Save ID to file
    echo -n $ID > /linode-info/linode-id
    exit 0
