# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: node-volume-limit
  labels:
    all:
    basic:
spec:
  bindings:
    - name: nodes
      # number of nodes in cluster
      value: (length(x_k8s_list($client, 'v1', 'Node', '').items))
    - name: linode_url
      value: (base64_decode(x_k8s_get($client, 'v1', 'Secret', 'kube-system', 'linode').data.apiurl || base64_encode('https://api.linode.com')))
    - name: linode_token
      value: (base64_decode(x_k8s_get($client, 'v1', 'Secret', 'kube-system', 'linode').data.token))
    - name: node_name
      value: (x_k8s_list($client, 'v1', 'Node', '').items[0].metadata.name)
  steps:
  - name: Check if CSI Driver is deployed
    try:
    - assert:
        file: assert-csi-driver-resources.yaml
  - name: Verify initial node capacity
    try:
    - script:
        env:
        - name: NODE_NAME
          value: ($node_name)
        content: |
          MAX_VOL=$(kubectl get csinode $NODE_NAME -o jsonpath='{.spec.drivers[?(@.name=="linodebs.csi.linode.com")].allocatable.count}')
          
          # Get the CSI node pod running on the target node
          CSI_POD=$(kubectl get pods -n kube-system -l app=csi-linode-node --field-selector spec.nodeName=$NODE_NAME -o jsonpath='{.items[0].metadata.name}')
          if [ -z "$CSI_POD" ]; then
            echo "Error: Could not find CSI node pod on node $NODE_NAME"
            exit 1
          fi
          echo "Found CSI node pod: $CSI_POD"
          
          # Count QEMU disks inside the CSI node pod using /sys/block and /proc/scsi/scsi
          # This mimics the logic used by the CSI driver itself (see internal/driver/limits.go)
          DISK_COUNT=$(kubectl exec -n kube-system $CSI_POD -c csi-linode-plugin -- sh -c '
            count=0
            # Check each block device in /sys/block
            for device in /sys/block/*; do
              if [ -d "$device" ]; then
                device_name=$(basename "$device")
                # Skip loop, ram, and other non-disk devices
                case "$device_name" in
                  loop*|ram*|sr*|fd*) continue ;;
                esac
                
                # Check if device has vendor info
                if [ -f "$device/device/vendor" ]; then
                  vendor=$(cat "$device/device/vendor" 2>/dev/null | tr -d " \t\n\r")
                  if [ "$vendor" = "QEMU" ] || [ "$vendor" = "qemu" ]; then
                    count=$((count + 1))
                  fi
                fi
              fi
            done
            echo $count
          ')
          
          # Calculate expected max volumes (8 - disk count, similar to CSI driver logic)
          # The CSI driver uses maxVolumeAttachments(memory) - diskCount
          # For most instances (also the one used for running tests), this defaults to 8 - diskCount
          EXPECTED_MAX_VOL=$((8 - DISK_COUNT))
          
          echo "CSI allocatable count: $MAX_VOL"
          echo "QEMU disk count: $DISK_COUNT"
          echo "Expected max volumes (8 - $DISK_COUNT): $EXPECTED_MAX_VOL"
          if [ "$MAX_VOL" != "$EXPECTED_MAX_VOL" ]; then
            echo "Mismatch: CSI count ($MAX_VOL) != Expected count ($EXPECTED_MAX_VOL)"
            exit 1
          fi
          echo "Node capacity verified successfully."
        check:
          ($error): ~
          (contains($stdout, 'Node capacity verified successfully')): true
  - name: Create StatefulSet to saturate node
    try:
    - apply:
        file: create-statefulset.yaml
  - name: Assert StatefulSet is ready
    try:
    - assert:
        file: assert-statefulset-ready.yaml
  - name: Restart csi-linode-node daemonset
    try:
    - script:
        content: |
          kubectl rollout restart daemonset -n kube-system csi-linode-node
        check:
          ($error): ~
    - script:
        content: |
          kubectl rollout status daemonset/csi-linode-node -n kube-system --timeout=300s
        check:
          ($error): ~
  - name: Wait for CSINode resource to get updated by the restart and verify node capacity
    try:
    - script:
        content: |
          sleep 30s
        check:
          ($error): ~
    - script:
        env:
        - name: NODE_NAME
          value: ($node_name)
        content: |
          MAX_VOL=$(kubectl get csinode $NODE_NAME -o jsonpath='{.spec.drivers[?(@.name=="linodebs.csi.linode.com")].allocatable.count}')
          
          # Get the CSI node pod running on the target node
          CSI_POD=$(kubectl get pods -n kube-system -l app=csi-linode-node --field-selector spec.nodeName=$NODE_NAME -o jsonpath='{.items[0].metadata.name}')
          if [ -z "$CSI_POD" ]; then
            echo "Error: Could not find CSI node pod on node $NODE_NAME"
            exit 1
          fi
          echo "Found CSI node pod: $CSI_POD"
          
          # Count QEMU disks inside the CSI node pod using /sys/block
          # This mimics the logic used by the CSI driver itself (see internal/driver/limits.go)
          DISK_COUNT=$(kubectl exec -n kube-system $CSI_POD -c csi-linode-plugin -- sh -c '
            count=0
            # Check each block device in /sys/block
            for device in /sys/block/*; do
              if [ -d "$device" ]; then
                device_name=$(basename "$device")
                # Skip loop, ram, and other non-disk devices
                case "$device_name" in
                  loop*|ram*|sr*|fd*) continue ;;
                esac
                
                # Check if device has vendor info
                if [ -f "$device/device/vendor" ]; then
                  vendor=$(cat "$device/device/vendor" 2>/dev/null | tr -d " \t\n\r")
                  if [ "$vendor" = "QEMU" ] || [ "$vendor" = "qemu" ]; then
                    count=$((count + 1))
                  fi
                fi
              fi
            done
            echo $count
          ')
          
          # Calculate expected max volumes (8 - disk count, similar to CSI driver logic)
          # The CSI driver uses maxVolumeAttachments(memory) - diskCount
          # For most instances (also the one used for running tests), this defaults to 8 - diskCount
          EXPECTED_MAX_VOL=$((8 - DISK_COUNT))
          
          echo "CSI allocatable count: $MAX_VOL"
          echo "QEMU disk count: $DISK_COUNT"
          echo "Expected max volumes (8 - $DISK_COUNT): $EXPECTED_MAX_VOL"
          if [ "$MAX_VOL" != "$EXPECTED_MAX_VOL" ]; then
            echo "Mismatch after restart: CSI count ($MAX_VOL) != Expected count ($EXPECTED_MAX_VOL)"
            exit 1
          fi
          echo "Node capacity verified successfully after restart."
        check:
          ($error): ~
          (contains($stdout, 'Node capacity verified successfully after restart')): true
  - name: Cleanup
    try:
    - delete:
        ref:
          apiVersion: apps/v1
          kind: StatefulSet
          name: test-statefulset
    - delete:
        ref:
          apiVersion: v1
          kind: PersistentVolumeClaim
    - script:
        content: |
          ../check-volume-deleted.sh $FILTER
        env:
        - name: FILTER
          value: (to_string({"tags":($namespace)}))
        - name: TARGET_API
          value: ($linode_url)
        - name: TARGET_API_VERSION
          value: v4
        - name: URI
          value: volumes
        - name: LINODE_TOKEN
          value: ($linode_token)
        check:
          ($error): ~
          (contains($stdout, 'Volume deleted in Linode')): true 
