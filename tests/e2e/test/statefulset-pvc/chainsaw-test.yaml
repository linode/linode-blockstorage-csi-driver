# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: statefulset-pvc
  labels:
    all:
    statefulset:
spec:
  bindings:
    - name: nodes
      # number of nodes in cluster
      value: ((env('WORKER_NODES') | to_number(@)) + (env('CONTROLPLANE_NODES') | to_number(@)))
  steps:
    - name: Check if CSI Driver is deployed
      try:
        - assert:
            file: assert-csi-driver-resources.yaml
    - name: Create Redis StatefulSet
      try:
        - apply:
            file: create-redis-statefulset.yaml
      catch:
        - describe:
            apiVersion: apps/v1
            kind: StatefulSet
    - name: Check if Redis Statefulset is ready and Volume is mounted
      try:
        - assert:
            file: assert-statefulset-pvc.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: PersistentVolumeClaim
        - describe:
            apiVersion: apps/v1
            kind: StatefulSet
    - name: Check if volume is create
      try:
        - script:
            env:
              - name: TARGET_API
                value: api.linode.com
              - name: TARGET_API_VERSION
                value: v4beta
              - name: URI
                value: volumes
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              set -e
              curl -s \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "X-Filter: $FILTER" \
                -H "Content-Type: application/json" \
                "https://api.linode.com/v4beta/volumes"
            check:
              ($error): ~
              (json_parse($stdout)):
                results: 1
    - name: Create a file inside the pod
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE redis-test-0 -- sh -c "cd data && touch testfile"
            check:
              ($error): ~
    - name: Delete the redis pod
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl delete po -n $NAMESPACE redis-test-0
            check:
              ($error): ~
    - name: Wait for redis pod to recreate
      try:
        - assert:
            file: assert-statefulset-pvc.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: PersistentVolumeClaim
        - describe:
            apiVersion: apps/v1
            kind: StatefulSet
    - name: Check if the file still exists in /data dir
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE redis-test-0 -- sh -c "ls data"
            check:
              ($error): ~
              (contains($stdout, 'testfile')): true
    - name: Delete Redis Statefulset
      try:
        - delete:
            ref:
              apiVersion: apps/v1
              kind: StatefulSet
    - name: Check if the volume is detached on Node resource and in Linode (using API)
      try:
        - script:
            env:
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              ../check-volume-detached.sh $FILTER
            check:
              ($error): ~
              (contains($stdout, 'Volume was successfully detached')): true
              (contains($stdout, 'Volume detached in Linode')): true
    - name: Delete PVC
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: PersistentVolumeClaim
    - name: Check if the Volume was deleted
      try:
        - script:
            env:
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              ../check-volume-deleted.sh $FILTER
            check:
              ($error): ~
              (contains($stdout, 'Volume deleted in Linode')): true
