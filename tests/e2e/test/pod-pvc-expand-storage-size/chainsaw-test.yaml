# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: pod-pvc-expand-storage-size
  labels:
    all:
    fsblock:
    expandvol:
spec:
  bindings:
    - name: nodes
      # number of nodes in cluster
      value: (length(x_k8s_list($client, 'v1', 'Node', '').items))
    - name: linode_url
      value: (base64_decode(x_k8s_get($client, 'v1', 'Secret', 'kube-system', 'linode').data.apiurl || base64_encode('https://api.linode.com')))
    - name: linode_token
      value: (base64_decode(x_k8s_get($client, 'v1', 'Secret', 'kube-system', 'linode').data.token))
  steps:
    - name: Check if CSI Driver is deployed
      try:
        - assert:
            file: assert-csi-driver-resources.yaml
    - name: Create PVC and Pod
      try:
        - apply:
            file: create-pvc-pod.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - describe:
            apiVersion: v1
            kind: PersistentVolumeClaim
    - name: Check if Pod is ready and Volume is mounted
      try:
        - assert:
            file: assert-pvc-pod.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: PersistentVolumeClaim
        - describe:
            apiVersion: v1
            kind: Pod
        - podLogs:
            selector: app=csi-linode-node
            namespace: kube-system
        - podLogs:
            selector: app=csi-linode-controller
            namespace: kube-system
    - name: Check if volume is create and size is 10 Gi
      try:
        - script:
            env:
              - name: TARGET_API
                value: ($linode_url)
              - name: TARGET_API_VERSION
                value: v4
              - name: URI
                value: volumes
              - name: LINODE_TOKEN
                value: ($linode_token)
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              set -e
              curl -s \
                -H "Authorization: Bearer ${LINODE_TOKEN}" \
                -H "X-Filter: $FILTER" \
                -H "Content-Type: application/json" \
                "${TARGET_API}/${TARGET_API_VERSION}/${URI}"
            check:
              ($error): ~
              (json_parse($stdout)):
                results: 1
                data:
                  - size: 10
        - assert:
            resource:
              apiVersion: v1
              kind: PersistentVolume
              spec:
                capacity:
                  storage: 10Gi
    - name: Check size
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "df -h /data"
            check:
              ($error): ~
              (contains($stdout, '9.8G')): true
    - name: Create a file inside the pod and check it was created
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "cd data && touch testfile" && \
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "ls data"
            check:
              ($error): ~
              (contains($stdout, 'testfile')): true
    - name: Update PVC to expand volume size to 20Gi
      try:
        - patch:
            file: update-pvc.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: PersistentVolumeClaim
        - describe:
            apiVersion: v1
            kind: PersistentVolume
    - name: Check if volume size was changed on Linode
      try:
        - script:
            env:
              - name: TARGET_API
                value: ($linode_url)
              - name: TARGET_API_VERSION
                value: v4
              - name: URI
                value: volumes
              - name: LINODE_TOKEN
                value: ($linode_token)
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
              - name: VOLUME_SIZE
                value: "20"
            content: |
              ../check-volume-size.sh $FILTER $VOLUME_SIZE
            check:
              ($error): ~
              (contains($stdout, 'Volume size was changed successfully')): true
    - name: Check if PV reflect storage expansion
      try:
        - assert:
            resource:
              apiVersion: v1
              kind: PersistentVolume
              spec:
                capacity:
                  storage: 20Gi
    - name: Check size after expansion, before unmounting
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "df -h /data"
            check:
              ($error): ~
              (contains($stdout, '9.8G')): true
    - name: Check if the file still exists
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "ls data"
            check:
              ($error): ~
              (contains($stdout, 'testfile')): true
    - name: Delete the Pod
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: Pod
    - name: Check if the volume is detached on Node resource and in Linode (using API)
      try:
        - script:
            env:
              - name: TARGET_API
                value: ($linode_url)
              - name: TARGET_API_VERSION
                value: v4
              - name: URI
                value: volumes
              - name: LINODE_TOKEN
                value: ($linode_token)
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              ../check-volume-detached.sh $FILTER
            check:
              ($error): ~
              (contains($stdout, 'Volume was successfully detached')): true
              (contains($stdout, 'Volume detached in Linode')): true
    - name: Create Pod
      try:
        - create:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                name: e2e-pod
              spec:
                containers:
                - name: e2e-pod
                  image: ubuntu
                  command:
                  - sleep
                  - "1000000"
                  volumeMounts:
                  - mountPath: /data
                    name: csi-volume
                tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                volumes:
                - name: csi-volume
                  persistentVolumeClaim:
                    claimName: pvc-filesystem
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
    - name: Check if Pod is ready and Volume is mounted
      try:
        - assert:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                name: e2e-pod
              status:
                containerStatuses:
                - name: e2e-pod
                  ready: true
                  started: true
                phase: Running
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - podLogs:
            selector: app=csi-linode-node
            namespace: kube-system
        - podLogs:
            selector: app=csi-linode-controller
            namespace: kube-system
    - name: Check size after expansion, after remounting
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              kubectl exec -n $NAMESPACE e2e-pod -- sh -c "df -h /data"
            check:
              ($error): ~
              (contains($stdout, '20G')): true
    - name: Delete the Pod
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: Pod
    - name: Delete PVC
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: PersistentVolumeClaim
    - name: Check if the Volume was deleted
      try:
        - script:
            env:
              - name: TARGET_API
                value: ($linode_url)
              - name: TARGET_API_VERSION
                value: v4
              - name: URI
                value: volumes
              - name: LINODE_TOKEN
                value: ($linode_token)
              - name: FILTER
                value: (to_string({"tags":($namespace)}))
            content: |
              ../check-volume-deleted.sh $FILTER
            check:
              ($error): ~
              (contains($stdout, 'Volume deleted in Linode')): true
