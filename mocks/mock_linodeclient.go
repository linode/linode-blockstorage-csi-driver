// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/linode-client/linode-client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/linode-client/linode-client.go -destination=mocks/mock_linodeclient.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	linodego "github.com/linode/linodego"
	gomock "go.uber.org/mock/gomock"
)

// MockLinodeClient is a mock of LinodeClient interface.
type MockLinodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinodeClientMockRecorder
}

// MockLinodeClientMockRecorder is the mock recorder for MockLinodeClient.
type MockLinodeClientMockRecorder struct {
	mock *MockLinodeClient
}

// NewMockLinodeClient creates a new mock instance.
func NewMockLinodeClient(ctrl *gomock.Controller) *MockLinodeClient {
	mock := &MockLinodeClient{ctrl: ctrl}
	mock.recorder = &MockLinodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinodeClient) EXPECT() *MockLinodeClientMockRecorder {
	return m.recorder
}

// AttachVolume mocks base method.
func (m *MockLinodeClient) AttachVolume(arg0 context.Context, arg1 int, arg2 *linodego.VolumeAttachOptions) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockLinodeClientMockRecorder) AttachVolume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockLinodeClient)(nil).AttachVolume), arg0, arg1, arg2)
}

// CloneVolume mocks base method.
func (m *MockLinodeClient) CloneVolume(arg0 context.Context, arg1 int, arg2 string) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVolume indicates an expected call of CloneVolume.
func (mr *MockLinodeClientMockRecorder) CloneVolume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVolume", reflect.TypeOf((*MockLinodeClient)(nil).CloneVolume), arg0, arg1, arg2)
}

// CreateVolume mocks base method.
func (m *MockLinodeClient) CreateVolume(arg0 context.Context, arg1 linodego.VolumeCreateOptions) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockLinodeClientMockRecorder) CreateVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockLinodeClient)(nil).CreateVolume), arg0, arg1)
}

// DeleteVolume mocks base method.
func (m *MockLinodeClient) DeleteVolume(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockLinodeClientMockRecorder) DeleteVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockLinodeClient)(nil).DeleteVolume), arg0, arg1)
}

// DetachVolume mocks base method.
func (m *MockLinodeClient) DetachVolume(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockLinodeClientMockRecorder) DetachVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockLinodeClient)(nil).DetachVolume), arg0, arg1)
}

// GetInstance mocks base method.
func (m *MockLinodeClient) GetInstance(arg0 context.Context, arg1 int) (*linodego.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0, arg1)
	ret0, _ := ret[0].(*linodego.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockLinodeClientMockRecorder) GetInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockLinodeClient)(nil).GetInstance), arg0, arg1)
}

// GetVolume mocks base method.
func (m *MockLinodeClient) GetVolume(arg0 context.Context, arg1 int) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockLinodeClientMockRecorder) GetVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockLinodeClient)(nil).GetVolume), arg0, arg1)
}

// ListInstanceDisks mocks base method.
func (m *MockLinodeClient) ListInstanceDisks(ctx context.Context, instanceID int, options *linodego.ListOptions) ([]linodego.InstanceDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceDisks", ctx, instanceID, options)
	ret0, _ := ret[0].([]linodego.InstanceDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceDisks indicates an expected call of ListInstanceDisks.
func (mr *MockLinodeClientMockRecorder) ListInstanceDisks(ctx, instanceID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceDisks", reflect.TypeOf((*MockLinodeClient)(nil).ListInstanceDisks), ctx, instanceID, options)
}

// ListInstanceVolumes mocks base method.
func (m *MockLinodeClient) ListInstanceVolumes(ctx context.Context, instanceID int, options *linodego.ListOptions) ([]linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceVolumes", ctx, instanceID, options)
	ret0, _ := ret[0].([]linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceVolumes indicates an expected call of ListInstanceVolumes.
func (mr *MockLinodeClientMockRecorder) ListInstanceVolumes(ctx, instanceID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceVolumes", reflect.TypeOf((*MockLinodeClient)(nil).ListInstanceVolumes), ctx, instanceID, options)
}

// ListInstances mocks base method.
func (m *MockLinodeClient) ListInstances(arg0 context.Context, arg1 *linodego.ListOptions) ([]linodego.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0, arg1)
	ret0, _ := ret[0].([]linodego.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockLinodeClientMockRecorder) ListInstances(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockLinodeClient)(nil).ListInstances), arg0, arg1)
}

// ListVolumes mocks base method.
func (m *MockLinodeClient) ListVolumes(arg0 context.Context, arg1 *linodego.ListOptions) ([]linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].([]linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockLinodeClientMockRecorder) ListVolumes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockLinodeClient)(nil).ListVolumes), arg0, arg1)
}

// NewEventPoller mocks base method.
func (m *MockLinodeClient) NewEventPoller(arg0 context.Context, arg1 any, arg2 linodego.EntityType, arg3 linodego.EventAction) (*linodego.EventPoller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEventPoller", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*linodego.EventPoller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEventPoller indicates an expected call of NewEventPoller.
func (mr *MockLinodeClientMockRecorder) NewEventPoller(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEventPoller", reflect.TypeOf((*MockLinodeClient)(nil).NewEventPoller), arg0, arg1, arg2, arg3)
}

// ResizeVolume mocks base method.
func (m *MockLinodeClient) ResizeVolume(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockLinodeClientMockRecorder) ResizeVolume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockLinodeClient)(nil).ResizeVolume), arg0, arg1, arg2)
}

// WaitForVolumeLinodeID mocks base method.
func (m *MockLinodeClient) WaitForVolumeLinodeID(arg0 context.Context, arg1 int, arg2 *int, arg3 int) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForVolumeLinodeID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForVolumeLinodeID indicates an expected call of WaitForVolumeLinodeID.
func (mr *MockLinodeClientMockRecorder) WaitForVolumeLinodeID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForVolumeLinodeID", reflect.TypeOf((*MockLinodeClient)(nil).WaitForVolumeLinodeID), arg0, arg1, arg2, arg3)
}

// WaitForVolumeStatus mocks base method.
func (m *MockLinodeClient) WaitForVolumeStatus(arg0 context.Context, arg1 int, arg2 linodego.VolumeStatus, arg3 int) (*linodego.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForVolumeStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*linodego.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForVolumeStatus indicates an expected call of WaitForVolumeStatus.
func (mr *MockLinodeClientMockRecorder) WaitForVolumeStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForVolumeStatus", reflect.TypeOf((*MockLinodeClient)(nil).WaitForVolumeStatus), arg0, arg1, arg2, arg3)
}
