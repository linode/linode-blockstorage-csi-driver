// Code generated by MockGen. DO NOT EDIT.
// Source: internal/driver/metadata.go
//
// Generated by this command:
//
//	mockgen -source=internal/driver/metadata.go -destination=mocks/mock_metadata.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	metadata "github.com/linode/go-metadata"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockMetadataClient is a mock of MetadataClient interface.
type MockMetadataClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataClientMockRecorder
}

// MockMetadataClientMockRecorder is the mock recorder for MockMetadataClient.
type MockMetadataClientMockRecorder struct {
	mock *MockMetadataClient
}

// NewMockMetadataClient creates a new mock instance.
func NewMockMetadataClient(ctrl *gomock.Controller) *MockMetadataClient {
	mock := &MockMetadataClient{ctrl: ctrl}
	mock.recorder = &MockMetadataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataClient) EXPECT() *MockMetadataClientMockRecorder {
	return m.recorder
}

// GetInstance mocks base method.
func (m *MockMetadataClient) GetInstance(ctx context.Context) (*metadata.InstanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx)
	ret0, _ := ret[0].(*metadata.InstanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockMetadataClientMockRecorder) GetInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockMetadataClient)(nil).GetInstance), ctx)
}

// MockKubeClient is a mock of KubeClient interface.
type MockKubeClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubeClientMockRecorder
}

// MockKubeClientMockRecorder is the mock recorder for MockKubeClient.
type MockKubeClientMockRecorder struct {
	mock *MockKubeClient
}

// NewMockKubeClient creates a new mock instance.
func NewMockKubeClient(ctrl *gomock.Controller) *MockKubeClient {
	mock := &MockKubeClient{ctrl: ctrl}
	mock.recorder = &MockKubeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeClient) EXPECT() *MockKubeClientMockRecorder {
	return m.recorder
}

// GetNode mocks base method.
func (m *MockKubeClient) GetNode(ctx context.Context, name string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockKubeClientMockRecorder) GetNode(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockKubeClient)(nil).GetNode), ctx, name)
}
