// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cryptsetup-client/cryptsetup-client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/cryptsetup-client/cryptsetup-client.go -destination=mocks/mock_cryptsetupclient.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cryptsetupclient "github.com/linode/linode-blockstorage-csi-driver/pkg/cryptsetup-client"
	cryptsetup "github.com/martinjungblut/go-cryptsetup"
	gomock "go.uber.org/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// ActivateByPassphrase mocks base method.
func (m *MockDevice) ActivateByPassphrase(deviceName string, keyslot int, passphrase string, flags int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateByPassphrase", deviceName, keyslot, passphrase, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateByPassphrase indicates an expected call of ActivateByPassphrase.
func (mr *MockDeviceMockRecorder) ActivateByPassphrase(deviceName, keyslot, passphrase, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateByPassphrase", reflect.TypeOf((*MockDevice)(nil).ActivateByPassphrase), deviceName, keyslot, passphrase, flags)
}

// ActivateByVolumeKey mocks base method.
func (m *MockDevice) ActivateByVolumeKey(deviceName, volumeKey string, volumeKeySize, flags int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateByVolumeKey", deviceName, volumeKey, volumeKeySize, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateByVolumeKey indicates an expected call of ActivateByVolumeKey.
func (mr *MockDeviceMockRecorder) ActivateByVolumeKey(deviceName, volumeKey, volumeKeySize, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateByVolumeKey", reflect.TypeOf((*MockDevice)(nil).ActivateByVolumeKey), deviceName, volumeKey, volumeKeySize, flags)
}

// Deactivate mocks base method.
func (m *MockDevice) Deactivate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockDeviceMockRecorder) Deactivate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockDevice)(nil).Deactivate), arg0)
}

// Dump mocks base method.
func (m *MockDevice) Dump() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(int)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockDeviceMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockDevice)(nil).Dump))
}

// Format mocks base method.
func (m *MockDevice) Format(arg0 cryptsetup.DeviceType, arg1 cryptsetup.GenericParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Format indicates an expected call of Format.
func (mr *MockDeviceMockRecorder) Format(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockDevice)(nil).Format), arg0, arg1)
}

// Free mocks base method.
func (m *MockDevice) Free() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockDeviceMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockDevice)(nil).Free))
}

// KeyslotAddByVolumeKey mocks base method.
func (m *MockDevice) KeyslotAddByVolumeKey(arg0 int, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyslotAddByVolumeKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeyslotAddByVolumeKey indicates an expected call of KeyslotAddByVolumeKey.
func (mr *MockDeviceMockRecorder) KeyslotAddByVolumeKey(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyslotAddByVolumeKey", reflect.TypeOf((*MockDevice)(nil).KeyslotAddByVolumeKey), arg0, arg1, arg2)
}

// Load mocks base method.
func (m *MockDevice) Load(arg0 cryptsetup.DeviceType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockDeviceMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDevice)(nil).Load), arg0)
}

// Type mocks base method.
func (m *MockDevice) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDeviceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDevice)(nil).Type))
}

// VolumeKeyGet mocks base method.
func (m *MockDevice) VolumeKeyGet(keyslot int, passphrase string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeKeyGet", keyslot, passphrase)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeKeyGet indicates an expected call of VolumeKeyGet.
func (mr *MockDeviceMockRecorder) VolumeKeyGet(keyslot, passphrase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeKeyGet", reflect.TypeOf((*MockDevice)(nil).VolumeKeyGet), keyslot, passphrase)
}

// MockCryptSetupClient is a mock of CryptSetupClient interface.
type MockCryptSetupClient struct {
	ctrl     *gomock.Controller
	recorder *MockCryptSetupClientMockRecorder
}

// MockCryptSetupClientMockRecorder is the mock recorder for MockCryptSetupClient.
type MockCryptSetupClientMockRecorder struct {
	mock *MockCryptSetupClient
}

// NewMockCryptSetupClient creates a new mock instance.
func NewMockCryptSetupClient(ctrl *gomock.Controller) *MockCryptSetupClient {
	mock := &MockCryptSetupClient{ctrl: ctrl}
	mock.recorder = &MockCryptSetupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptSetupClient) EXPECT() *MockCryptSetupClientMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockCryptSetupClient) Init(arg0 string) (cryptsetupclient.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(cryptsetupclient.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockCryptSetupClientMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCryptSetupClient)(nil).Init), arg0)
}

// InitByName mocks base method.
func (m *MockCryptSetupClient) InitByName(arg0 string) (cryptsetupclient.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitByName", arg0)
	ret0, _ := ret[0].(cryptsetupclient.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitByName indicates an expected call of InitByName.
func (mr *MockCryptSetupClientMockRecorder) InitByName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitByName", reflect.TypeOf((*MockCryptSetupClient)(nil).InitByName), arg0)
}
