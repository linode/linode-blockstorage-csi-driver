// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hwinfo/hwinfo.go
//
// Generated by this command:
//
//	mockgen -source=pkg/hwinfo/hwinfo.go -destination=mocks/mock_hwinfo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ghw "github.com/jaypipes/ghw"
	gomock "go.uber.org/mock/gomock"
)

// MockHardwareInfo is a mock of HardwareInfo interface.
type MockHardwareInfo struct {
	ctrl     *gomock.Controller
	recorder *MockHardwareInfoMockRecorder
	isgomock struct{}
}

// MockHardwareInfoMockRecorder is the mock recorder for MockHardwareInfo.
type MockHardwareInfoMockRecorder struct {
	mock *MockHardwareInfo
}

// NewMockHardwareInfo creates a new mock instance.
func NewMockHardwareInfo(ctrl *gomock.Controller) *MockHardwareInfo {
	mock := &MockHardwareInfo{ctrl: ctrl}
	mock.recorder = &MockHardwareInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHardwareInfo) EXPECT() *MockHardwareInfoMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockHardwareInfo) Block() (*ghw.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block")
	ret0, _ := ret[0].(*ghw.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockHardwareInfoMockRecorder) Block() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockHardwareInfo)(nil).Block))
}
