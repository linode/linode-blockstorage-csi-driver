// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/device-manager/device.go
//
// Generated by this command:
//
//	mockgen -source=pkg/device-manager/device.go -destination=mocks/mock_device.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeviceUtils is a mock of DeviceUtils interface.
type MockDeviceUtils struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceUtilsMockRecorder
}

// MockDeviceUtilsMockRecorder is the mock recorder for MockDeviceUtils.
type MockDeviceUtilsMockRecorder struct {
	mock *MockDeviceUtils
}

// NewMockDeviceUtils creates a new mock instance.
func NewMockDeviceUtils(ctrl *gomock.Controller) *MockDeviceUtils {
	mock := &MockDeviceUtils{ctrl: ctrl}
	mock.recorder = &MockDeviceUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceUtils) EXPECT() *MockDeviceUtilsMockRecorder {
	return m.recorder
}

// GetDiskByIdPaths mocks base method.
func (m *MockDeviceUtils) GetDiskByIdPaths(deviceName, partition string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskByIdPaths", deviceName, partition)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDiskByIdPaths indicates an expected call of GetDiskByIdPaths.
func (mr *MockDeviceUtilsMockRecorder) GetDiskByIdPaths(deviceName, partition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskByIdPaths", reflect.TypeOf((*MockDeviceUtils)(nil).GetDiskByIdPaths), deviceName, partition)
}

// VerifyDevicePath mocks base method.
func (m *MockDeviceUtils) VerifyDevicePath(devicePaths []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDevicePath", devicePaths)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDevicePath indicates an expected call of VerifyDevicePath.
func (mr *MockDeviceUtilsMockRecorder) VerifyDevicePath(devicePaths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDevicePath", reflect.TypeOf((*MockDeviceUtils)(nil).VerifyDevicePath), devicePaths)
}
